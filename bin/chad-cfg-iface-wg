#!/usr/bin/env sh
#
# Usage: chad-cfg-iface-wg	--subnet 129 --name remote-worker \
#				--site 99 --groups remote,lan \
#				--description 'Remote Workers' \
#				--tables dns-c,ntp-c,nas-c
#
########################################################################

set -euo pipefail
set -x

### PARSE AGUMENTS #####################################################
while [ ! -z ${1-} ]; do
	case "$1" in
		--subnet)
			typeset subnet=$2
			shift 2
			;;
		--name)
			typeset name=$2
			shift 2
			;;
		--site)
			typeset site=$2
			shift 2
			;;
		--groups)
			typeset groups=$(echo $2 | sed -e 's/,/ /g')
			shift 2
			;;
		--description)
			typeset description=$2
			shift 2
			;;
		--tables)
			typeset tables=$(echo $2 | sed -e 's/,/ /g')
			shift 2
			;;
		*)
			echo "Not recognized: $1" >&2
			exit 1
			;;
	esac
done

### SETUP ENVIRONMENT ##################################################
typeset	iface="wg${subnet}"
typeset	iface_cfg="hostname.${iface}"
: ${site:=$(	ifconfig					|
		grep -m 1 'inet 10'				|
		awk '{print $2}'				|
		cut -d '.' -f 2						)}
typeset	ipv4="10.${site}.${subnet}.$(( $RANDOM%199 +1 ))"
typeset	domain=$(	hostname				|
			rev					|
			cut -d '.' -f -2			|
			rev						)
typeset fqdn="${name}.${domain}"
typeset	nameservers:=$(	grep	"interface:[[:space:]]*10"	\
				'/var/unbound/etc/unbound.conf'	|
			cut -d ' ' -f 2					)
: ${nameservers:=$(	grep	'nameserver[[:space:]]*10'		\
				'/etc/resolv.conf'		|
			cut -d ' ' -f 2					)}
: ${nameservers:=9.9.9.9}

### WIREGUARD ##########################################################
# install if not already
which	wg		||
pkg_add	wireguard-tools
install	-d	-m	700	'/etc/wg'
# generate key
typeset	pvk=$(	wg	genkey	)
typeset	port=$(	awk	'/'"${subnet}"'$/ {print $1; exit}'	\
			'/etc/wg/wg-ports.conf'				)
# configure wg server
printf	'%s\n'					\
	'[Interface]'				\
	"PrivateKey = ${pvk}"			\
	"ListenPort = ${port}"			\
	''					\
	>	"/etc/wg/wg${subnet}.conf"

### INTERFACE ##########################################################
printf	'%s\n'								\
	'up'								\
	"inet ${ipv4}/24"						\
	"!/usr/local/bin/wg setconf wg${subnet} /etc/wg/wg${subnet}.conf" \
	>	"/etc/${iface_cfg}"
[ -z "${description-}" ]		||
printf	'%s\n'				\
	"description '${description}'"	\
	>>	"/etc/${iface_cfg}"
# groups
echo	"group ${name}"			\
	>>	"/etc/${iface_cfg}"
for g in ${groups-}; do
	echo	"group ${g}"			\
		>>	"/etc/${iface_cfg}"
done

### PACKET FILTER ######################################################
typeset	iface_anchor="filter-60/${iface}"
typeset	iface_anchor_cfg="filter-60-${iface}"
typeset	srv_anchor="filter-30/srv-${iface}"
typeset	srv_anchor_cfg="filter-30-srv-${iface}"
typeset	adm_table="adm-${name%%-}"
touch	"/etc/pf.anchors/${iface_anchor_cfg}"
chmod	600	"/etc/pf.anchors/${iface_anchor_cfg}"
# antispoof
printf	'%s\n'								\
	''								\
	"antispoof quick log for ${iface}"				\
	"block in quick log on ${iface} from ! ${iface}:network"
	>>	"/etc/pf.anchors/${iface_anchor_cfg}"
# adm
printf	'%s\n'								\
	''								\
	"table <${adm_table}> persist"					\
	"pass log on ${iface} from <${adm_table}> to ${iface}:network"	\
	>>	"/etc/pf.anchors/${iface_anchor_cfg}"
# allow ping to and from gateway
printf	'%s\n'							\
	''							\
	"pass in on ${iface} inet proto icmp to ${iface} \\"	\
	"icmp-type echoreq keep state"				\
	''							\
	"pass out on ${iface} inet proto icmp \\"		\
	"from ${iface} to ${iface}:network \\"			\
	"icmp-type echoreq keep state"				\
	>>	"/etc/pf.anchors/${iface_anchor_cfg}"
# wireguard service
printf	'%s\n'								\
	"pass in on egress inet proto udp to egress port ${port}"	\
	>>	"/etc/pf.anchors/${srv_anchor_cfg}"
# load anchors
printf	'%s\n'								\
	"!pfctl -a ${iface_anchor} -f /etc/pf.anchors/${iface_anchorcfg}" \
	>>	"/etc/${iface_cfg}"
printf	'%s\n'								\
	"!pfctl -a ${srv_anchor} -f /etc/pf.anchors/${srv_anchor_cfg}"	\
	>>	"/etc/${iface_cfg}"
# pf tables
for t in ${tables-}; do
	echo	"!pfctl -t ${t} -T add ${iface}:network"	\
		>>	"/etc/${iface_cfg}"
done
sh	'/etc/netstart'	"${iface}"
printf	'%s\n'	"network for ${iface} configured successfully."	>&2

### ADD ZONE TO NSD ####################################################
printf	'zone:\n\tname: "%s"\n\tzonefile: "master/%s"\n\n'	\
	"${fqdn}"		"${fqdn}"			\
	"${ipv4_net_ptr}"	"${ipv4_net_ptr}"		\
	>>	'/var/nsd/etc/nsd.conf'
nsd-checkconf	'/var/nsd/etc/nsd.conf'
# zone file
printf	'$ORIGIN\t\t\t%s.\n$TTL\t4h\n\n'	\
	"${fqdn}"				\
	>	"/var/nsd/zones/master/${fqdn}"
printf	'@\tIN\tSOA\tns-001 adm (\n'		\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s\t; %s\n'			\
	"$(date +%y%m%d%H%M)"	'serial'	\
	'1h'			'refresh'	\
	'30m'			'retry'		\
	'7d'			'expire'	\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s )\t; %s\n\n'			\
	'1h'	'negative'			\
	>>	"/var/nsd/zones/master/${fqdn}"
# name servers
printf	'\tIN\tNS\tns-001\n'			\
	>>	"/var/nsd/zones/master/${fqdn}"
# records
printf	'%s\tIN\t%s\t%s\n'			\
	"${hostname}"	'A'	"${ipv4}"	\
	'ns-001'	'CNAME'	"${hostname}"	\
	>>	"/var/nsd/zones/master/${fqdn}"
# reverse zone file
printf	'$TTL\t4h\n\n@\tIN\tSOA\tns-001.%s. adm.%s. (\n'	\
	"${fqdn}"	"${fqdn}"				\
	>>	"/var/nsd/zones/master/${ipv4_net_ptr}"
printf	'\t\t%s\t; %s\n'				\
	"$(date +%y%m%d%H%M)"	'serial'		\
	'1h'			'refresh'		\
	'30m'			'retry'			\
	'7d'			'expire'		\
	>>	"/var/nsd/zones/master/${ipv4_net_ptr}"
printf	'\t\t%s )\t; %s\n\n'				\
	'1h'	'negative'				\
	>>	"/var/nsd/zones/master/${ipv4_net_ptr}"
# name servers
printf	'\tIN\tNS\tns-001.%s.\n'			\
	"ns-001.${fqdn}"				\
	>>	"/var/nsd/zones/master/${ipv4_net_ptr}"
# records
printf	'%s\tIN\t%s\t%s.\n'				\
	"${ipv4##*.}"	'PTR'	"${hostname}.${fqdn}"	\
	>>	"/var/nsd/zones/master/${ipv4_net_ptr}"
nsd-checkzone	"${fqdn}"	"/var/nsd/zones/master/${fqdn}"
nsd-checkzone	"${fqdn}"	"/var/nsd/zones/master/${ipv4_net_ptr}"
rcctl	enable	nsd
rcctl	restart nsd

### ALLOW CLIENTS TO QUERY THROUGH UNBOUND #############################
typeset	ts="$(date +%Y%m%d%H%M%S)"
cp	-a	'/var/unbound/etc/unbound.conf'		\
		"/var/unbound/etc/.unbound.conf.${ts}"
sed -e							\
'/hide-version/ i\
	private-domain: "'"${fqdn}"'"\
	domain-insecure: "'"${fqdn}"'"\
	access-control: '"${ipv4_net}.0/24"' allow\
\
'	"/var/unbound/etc/.unbound.conf.${ts}"			\
	>	'/var/unbound/etc/unbound.conf'
printf	'\nstub-zone:\n\tname: "%s"\n\tstub-addr: %s\n\tstub-no-cache: yes\n' \
	"${fqdn}"		'127.0.0.1@5678'			\
	"${ipv4_net_ptr}"	'127.0.0.1@5678'			\
	>>	'/var/unbound/etc/unbound.conf'
unbound-checkconf
rcctl	enable	unbound
rcctl	restart unbound
printf	'%s\n'	"dns for ${iface} configured successfully."	>&2

# vim: ts=8:sw=8:sts=8:noet:ft=zsh
