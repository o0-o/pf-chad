#!/usr/bin/env sh
# Usage:
# cfg_iface	--vlan --subnet 99 --name sales --iface em0 --site 23 \
#		--mtu 9000 --groups lan --description 'Sales Dept' \
#		--tables sales,dns-c,ntp-c,wan-c

set -euo pipefail
set -x

# parse aguments
while [ ! -z ${1-} ]; do
	case "$1" in
		--vlan)
			typeset vlan='true'
			shift 1
			;;
		--subnet)
			typeset subnet=$2
			shift 2
			;;
		--name)
			typeset name=$2
			shift 2
			;;
		--iface)
			typeset iface=$2
			shift 2
			;;
		--site)
			typeset site=$2
			shift 2
			;;
		--mtu)
			typeset mtu=$2
			shift 2
			;;
		--groups)
			typeset groups=$(echo $2 | sed -e 's/,/ /g')
			shift 2
			;;
		--description)
			typeset description=$2
			shift 2
			;;
		--tables)
			typeset tables=$(echo $2 | sed -e 's/,/ /g')
			shift 2
			;;
		*)
			echo "Not recognized: $1" >&2
			exit 1
			;;
	esac
done

# define environment
: ${vlan:=false}
typeset	iface_cfg="hostname.${iface}"
: ${site:=$(	ifconfig					|
		grep -m 1 'inet 10'				|
		awk '{print $2}'				|
		cut -d '.' -f 2						)}
# find available subnets
typeset all_sns=$(	sn=1
			while [ $sn -lt 255 ]; do
				printf '%s\n' $sn
				sn=$(( $sn + 1 ))
			done				)
typeset	used_sns=$(	ifconfig					|
			awk '/^[[:space:]]*inet 10\./ {print $2}'	|
			cut -d '.' -f 3					|
			tr	'\n'	' '				      )
typeset	avail_sns="$all_sns"
for usn in $used_sns; do
	avail_sns=$(	echo	"$avail_sns"		|
			sed	-e	'/^'"$usn"'$/d'		)
done
typeset	num_avail_sn=$(	echo	"$avail_sns"	|
			wc	-l			)
# choose random subnet if not defined in flags
: ${subnet:=$(( $RANDOM % $num_avail_sn ))}
# assign random gateway ip
typeset	ipv4="10.${site}.${subnet}.$(( $RANDOM % 199 +1 ))"
# define network
typeset	ipv4_net=${ipv4%.*}
typeset	ipv4_net_ptr=$(	echo	$ipv4					|
			awk	-F	'.'				\
			'{ print "$3"."$2"."$1".in-addr.arpa" }'	      )
typeset	hostname=$(	hostname -s	)
typeset	domain=$(	hostname				|
			rev					|
			cut -d '.' -f -2			|
			rev						)
typeset fqdn="${name}.${domain}"

# set interface to up
typeset	iface_cfg="hostname.${iface}"
[ -e "/etc/${iface_cfg}" ]			||
echo	'up'	>	"/etc/${iface_cfg}"
grep	-q "^up$"	"/etc/${iface_cfg}"	||
{	cp	-a	"/etc/${iface_cfg}"	\
			"/tmp/${iface_cfg}"
	sed	-e	'1i\
up\
'	>	"/etc/${iface_cfg}"
}
sh '/etc/netstart' "${iface}"
# if vlan, switch to vlan conf file
! $vlan	||
{	typeset	iface_cfg="hostname.vlan${subnet}"
	# interface
	printf	'%s\n'					\
		"vnetid ${subnet} parent ${iface}"	\
		'up'					\
	>	"/etc/${iface_cfg}"
	typeset	parent_iface="${iface}"
	typeset	iface="vlan${subnet}"
}
# finish configuring interface
printf	'%s\n'				\
	'lladdr random'			\
	"inet ${ipv4}/24"		\
	>>	"/etc/${iface_cfg}"
[ -z "${mtu-}" ]			||
printf	'mtu %s\n'			\
	"${mtu}"			\
	>>	"/etc/${iface_cfg}"
[ -z "${description-}" ]		||
printf	'description "%s"\n'		\
	"${description}"		\
	>>	"/etc/${iface_cfg}"

# groups
echo	"group ${name}"			\
	>>	"/etc/${iface_cfg}"
for g in ${groups-}; do
	echo	"group ${g}"			\
		>>	"/etc/${iface_cfg}"
done

# allow dhcp
printf	'%s %s | %s\n'						\
	"!echo 'pass in quick on ${iface} inet proto udp"	\
	"from port bootps to ${iface} port bootpc'"		\
	"pfctl -a ${iface} -f -"				\
	>>	"/etc/${iface_cfg}"
# antispoof rule
printf	'%s | %s\n'					\
	"!echo 'antispoof quick log for ${iface}'"	\
	"pfctl -a ${iface} -f -"			\
	>>	"/etc/${iface_cfg}"
# ping
printf	'%s %s | %s\n'							\
	"!echo 'pass in on ${iface} inet proto icmp to ${iface}"	\
	"icmp-type echoreq keep state'"					\
	"pfctl -a ${iface} -f -"					\
	>>	"/etc/${iface_cfg}"

# pf tables
for t in ${tables-}; do
	echo	"!pfctl -t ${t} -T add ${iface}:network"	\
		>>	"/etc/${iface_cfg}"
done
sh '/etc/netstart' "${iface}"
printf	'%s\n'	"network for ${iface} configured successfully."	>&2

# dhcpd
printf	'shared-network %s {\n'				\
	"${name}"					\
	>>	'/etc/dhcpd.conf'
printf	'\toption %s %s;\n'				\
	'domain-name'		"\"${fqdn}\""		\
	>>	'/etc/dhcpd.conf'
printf	'\tsubnet 10.%s.%s.0 netmask 255.255.255.0 {\n'	\
	"${site}"	"${subnet}"			\
	>>	'/etc/dhcpd.conf'
printf	'\t\toption %s %s;\n'				\
	'routers'	"${ipv4}"			\
	>>	'/etc/dhcpd.conf'
printf	'\t\trange %s %s;\n'				\
	"${ipv4_net}.200"	"${ipv4_net}.254"	\
	>>	'/etc/dhcpd.conf'
printf	'\n\t}\n}\n'					\
	>>	'/etc/dhcpd.conf'
# enable dhcpd for the new interface
typeset	ts="$(date +%Y%m%d%H%M%S)"
cp	-a	'/etc/rc.conf.local'		\
		"/etc/.rc.conf.local.${ts}"
rcctl	enable	dhcpd
sed	-e	'/dhcpd_flags/ { s/$/ '"${iface}"'/; }'	\
	"/etc/.rc.conf.local.${ts}"			\
	>	'/etc/rc.conf.local'
rcctl	restart dhcpd
printf	'%s\n'	"dhcp for ${iface} configured successfully."	>&2

# nsd
printf	'zone:\n\tname: "%s"\n\tzonefile: "master/%s"\n\n'	\
	"${fqdn}"		"${fqdn}"			\
	"${ipv4_net_ptr}"	"${ipv4_net_ptr}"		\
	>>	'/var/nsd/etc/nsd.conf'
nsd-checkconf	'/var/nsd/etc/nsd.conf'
# zone file
printf	'$ORIGIN\t\t\t%s.\n$TTL\t4h\n\n'	\
	"${fqdn}"				\
	>	"/var/nsd/zones/master/${fqdn}"
printf	'@\tIN\tSOA\tns-001 adm (\n'		\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s\t; %s\n'			\
	"$(date +%y%m%d%H%M)"	'serial'	\
	'1h'			'refresh'	\
	'30m'			'retry'		\
	'7d'			'expire'	\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s )\t; %s\n\n'			\
	'1h'	'negative'			\
	>>	"/var/nsd/zones/master/${fqdn}"
# name servers
printf	'\tIN\tNS\tns-001\n'			\
	>>	"/var/nsd/zones/master/${fqdn}"
# records
printf	'%s\tIN\t%s\t%s\n'			\
	"${hostname}"	'A'	"${ipv4}"	\
	'ns-001'	'CNAME'	"${hostname}"	\
	>>	"/var/nsd/zones/master/${fqdn}"
# reverse zone file
printf	'$TTL\t4h\n\n@\tIN\tSOA\tns-001.%s. adm.%s. (\n'	\
	"${fqdn}"	"${fqdn}"				\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s\t; %s\n'				\
	"$(date +%y%m%d%H%M)"	'serial'		\
	'1h'			'refresh'		\
	'30m'			'retry'			\
	'7d'			'expire'		\
	>>	"/var/nsd/zones/master/${fqdn}"
printf	'\t\t%s )\t; %s\n\n'			\
	'1h'	'negative'			\
	>>	"/var/nsd/zones/master/${fqdn}"
# name servers
printf	'\tIN\tNS\tns-001.%s.\n'		\
	"ns-001.${fqdn}"			\
	>>	"/var/nsd/zones/master/${fqdn}"
# records
printf	'%s\tIN\t%s\t%s.\n'				\
	"${ipv4##*.}"	'PTR'	"${hostname}.${fqdn}"	\
	>>	"/var/nsd/zones/master/${fqdn}"
nsd-checkzone	"${fqdn}"	"/var/nsd/zones/master/${fqdn}"
rcctl	restart nsd

# unbound
typeset	ts="$(date +%Y%m%d%H%M%S)"
cp	-a	'/var/unbound/etc/unbound.conf'		\
		"/var/unbound/etc/.unbound.conf.${ts}"
sed -e							\
'/hide-version/ i\
	private-domain: "'"${fqdn}"'"\
	domain-insecure: "'"${fqdn}"'"\
	access-control: '"${ipv4_net}.0/24"' allow\
\
'	"/var/unbound/etc/.unbound.conf.${ts}"			\
	>	'/var/unbound/etc/unbound.conf'
printf	'\nstub-zone:\n\tname: "%s"\n\tstub-addr: %s\n\tstub-no-cache: yes\n' \
	"${fqdn}"		'127.0.0.1@5678'			\
	"${ipv4_net_ptr}"	'127.0.0.1@5678'			\
	>>	'/var/unbound/etc/unbound.conf'
unbound-checkconf
rcctl	restart unbound
printf	'%s\n'	"dns for ${iface} configured successfully."	>&2

# vim: ts=8:sw=8:sts=8:noet:ft=zsh
